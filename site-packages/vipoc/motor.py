from typing import List
import vipoc.gpio as gpio # type: ignore

PWR_PINS: List[int] = [0,  2,  14, 16, 18, 22, 24, 26]
DIR_PINS: List[int] = [36, 1,  11, 15, 17, 19, 21, 25]
FLT_PINS: List[int] = [37, 38, 39, 40, 41, 42, 43, 29]

UP = False
DOWN = True

ON = True
OFF = True

def set_value(motor: int, power: None | bool, direction: None | bool):
    """Sets a motors state"""
    if not direction is None:
        set_direction(motor, direction)
    
    if not power is None:
        set_power(motor, power)
    

def get_direction(motor: int) -> bool:
    return gpio.get_val(DIR_PINS[motor])

def set_direction(motor: int, direction: bool):
    """Sets a motor in a specific direction without bounds checking"""
    if direction:
        up(motor)
    else:
        down(motor)


def up(motor: int):
    """Sets a motor to run up without bounds check"""
    gpio.off(DIR_PINS[motor])

def down(motor: int):
    """Sets a motor to run down without bounds check"""
    gpio.on(DIR_PINS[motor])


def get_power(motor: int) -> bool:
    return gpio.get_val(PWR_PINS[motor])

def set_power(motor: int, power: bool):
    """Turns a motor on or off"""
    if power:
        on(motor)
    else:
        off(motor)

def on(motor: int):
    """Turns a motor on"""
    gpio.on(PWR_PINS[motor])


def off(motor: int):
    """Turns a motor off without bounds check"""
    gpio.off(PWR_PINS[motor])
    
class Motor:
    def __init__(self, motor: int):
        self._pwr = PWR_PINS[motor]
        self._dir = DIR_PINS[motor]
        self._flt = FLT_PINS[motor]
    
    def set_val(self, power: None | bool, direction: None | bool):
        if not direction is None:
            self.set_direction(direction)
        
        if not power is None:
            self.set_power(power)
    
    def get_direction(self) -> bool:
        return gpio.get_val(self._dir)
    
    def set_direction(self, direction: bool):
        if direction:
            self.up()
        else:
            self.down()
    
    def up(self):
        gpio.off(self._dir)
        pass
    
    def down(self):
        gpio.on(self._dir)
        pass
    
    def get_power(self) -> bool:
        return gpio.get_val(self._pwr)
    
    def set_power(self, power: bool):
        if power:
            self.on()
        else:
            self.off()
    
    def on(self):
        gpio.on(self._pwr)
    
    def off(self):
        gpio.off(self._pwr)