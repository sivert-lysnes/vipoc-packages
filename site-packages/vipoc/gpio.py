import ctypes

_lib = ctypes.CDLL("/usr/lib/python3.6/site-packages/vipoc/gpio_lib.so")

_lib.SetDirection.argtypes = (ctypes.c_int, ctypes.c_int)
_lib.SetDirection.restype = ctypes.c_int

_lib.GetDirection.argtypes = (ctypes.c_int, )
_lib.GetDirection.restype = ctypes.c_int

_lib.Set.argtypes = (ctypes.c_int, ctypes.c_int)
_lib.Set.restype = ctypes.c_int

_lib.Get.argtypes = (ctypes.c_int, )
_lib.Get.restype = ctypes.c_int

_lib.init()

def get_val(pin: int):
    return _lib.Get(ctypes.c_int(pin))

def set_val(pin: int, value: bool):
    if value: 
        on(pin)
    else:
        off(pin)

def on(pin: int):
    _lib.Set(ctypes.c_int(pin), ctypes.c_int(1))

def off(pin: int):
    _lib.Set(ctypes.c_int(pin), ctypes.c_int(0))

def get_dir(pin: int):
    return _lib.GetDirection(ctypes.c_int(pin)) > 0

def set_dir(pin: int, value: bool):
    if value:
        output(pin)
    else:
        input(pin)

def output(pin: int):
    _lib.SetDirection(ctypes.c_int(pin), ctypes.c_int(1))

def input(pin: int):
    _lib.SetDirection(ctypes.c_int(pin), ctypes.c_int(0))

class GPIO:
    def __init__(self, pin: int):
        self.pin = pin
    
    def on(self):
        on(self.pin)
    
    def off(self):
        off(self.pin)
    
    def set_val(self, value: bool):
        set_val(self.pin, value)
    
    def get_val(self):
        return get_val(self.pin)
    
    def get_dir(self):
        return get_dir(self.pin)
    
    def set_dir(self, value: bool):
        set_dir(self.pin, value)
    
    def output(self):
        output(self.pin)
    
    def input(self):
        input(self.pin)