import mmap
import os
import tempfile
from typing import Tuple

IN: bool = False
OUT: bool = True

_GPIO_CTRL: int = 0x600
_GPIO_DATA: int = 0x620
_GPIO_DSET: int = 0x630
_GPIO_DCLR: int = 0x640

if os.name == "posix":
    with open("/dev/mem", "r+") as f:
        _mm = mmap.mmap(f.fileno(), 0x6AC, offset=0x10000000)
else:
    _fid, _fname = tempfile.mkstemp()
    _mm = mmap.mmap(_fid, 0x6AC)

def _calculate_offset(pin: int) -> Tuple[int, int]:
    return (pin // 8, pin % 8)

def get_val(pin: int):
    offset, shift = _calculate_offset(pin)
    return (_mm[offset + _GPIO_DATA] & (1 << shift)) > 0

def set_val(pin: int, value: bool):
    if value: 
        on(pin)
    else:
        off(pin)

def on(pin: int):
    offset, shift = _calculate_offset(pin)
    _mm[offset + _GPIO_DSET] |= 1 << shift

def off(pin: int):
    offset, shift = _calculate_offset(pin)
    _mm[offset + _GPIO_DCLR] |= 1 << shift

def get_dir(pin: int):
    offset, shift = _calculate_offset(pin)
    return _mm[offset + _GPIO_CTRL] & (1 << shift) > 0

def set_dir(pin: int, value: bool):
    if value:
        output(pin)
    else:
        input(pin)

def output(pin: int):
    offset, shift = _calculate_offset(pin)
    _mm[offset + _GPIO_CTRL] |= 1 << shift

def input(pin: int):
    offset, shift = _calculate_offset(pin)
    _mm[offset + _GPIO_CTRL] &= ~(1 << shift)

class GPIO:
    def __init__(self, pin: int):
        offset, shift = _calculate_offset(pin)
        
        self.dset: int = offset + _GPIO_DSET
        self.dclr: int = offset + _GPIO_DCLR
        self.ctrl: int = offset + _GPIO_CTRL
        self.data: int = offset + _GPIO_DATA
        self.mask: int = 1 << shift
    
    def get_val(self):
        return _mm[self.data] & self.mask > 0
    
    def set_val(self, value: bool):
        if value:
            self.on()
        else:
            self.off()
    
    def on(self):
        _mm[self.dset] |= self.mask
    
    def off(self):
        _mm[self.dclr] |= self.mask
    
    def get_dir(self):
        return _mm[self.ctrl] & self.mask > 0
    
    def set_dir(self, value: bool):
        if value:
            self.output()
        else:
            self.input()
    
    def input(self):
        _mm[self.ctrl] &= ~self.mask
    
    def output(self):
        _mm[self.ctrl] |= self.mask