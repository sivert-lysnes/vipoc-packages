from threading import Thread
from time import sleep
import spidev # type: ignore
from .utils import nop
_spi = spidev.SpiDev()
_spi.open(0, 1)
_spi.max_speed_hz = 500000

_event_handlers = [
    { "rising": nop, "falling": nop } for _ in range(8)
]

_listener = None

inputs = [0] * 8

def on(state, pin):
    def inner(func):
        valid = ["rising", "falling"]
        if not state in valid:
            raise TypeError("{} is not a valid pin state, valid states are: {}".format(state, ", ".join(valid)))
        
        _event_handlers[pin][state] = func
    
    return inner
    

def bitfield(n):
    out = [0] * 8
    for i in range(8):
        out[i] = (n >> i) % 2
    return out

def read_inputs() -> int:
    global input
    inputs = bitfield(~(_spi.readbytes(1)[0]) & 0b11111111)
    return inputs

def _poll_inputs(time):
    global inputs
    while True:
        new_inputs = read_inputs()
        for i in range(8):
            if new_inputs[i] != inputs[i]:
                if new_inputs[i] == 1:
                    _event_handlers[i]["rising"]()
                if new_inputs[i] == 0:
                    _event_handlers[i]["falling"]()
        inputs = new_inputs
        sleep(time)

def start_listener(time):
    global _listener
    if _listener is None:
        _listener = Thread(target=_poll_inputs, args=(time,))
        _listener.setDaemon(True)
        _listener.start()